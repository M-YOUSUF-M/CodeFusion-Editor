name: Build and Release PyInstaller Binaries

on:
  push:
    branches: [ "main" ] # Or your desired branch

jobs:
  build-and-release:
    runs-on: 
      - ubuntu-latest
      - windows-latest
      - macos-latest
      - ubuntu-latest # For ARM32
      - ubuntu-latest # For ARM64
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, ubuntu-latest, ubuntu-latest]
        arch: [x64, x64, x64, arm32, arm64] 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x' # Use your desired Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "arm32" ]]; then
            # Install dependencies for ARM32 on Ubuntu
            sudo apt-get update
            sudo apt-get install -y gcc-arm-linux-gnueabihf 
            # ... other necessary dependencies for ARM32
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            # Install dependencies for ARM64 on Ubuntu
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu 
            # ... other necessary dependencies for ARM64
          fi

          pip install PyQt5 google-generativeai qscintilla jedi --no-cache-dir

          # Build the executable with target architecture
          pyinstaller --name codefusion --onefile --target-arch=${{ matrix.arch }} editor.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: dist # Path to the built executable

  # Job to combine artifacts and upload to GitHub Releases
  combine-and-release:
    needs: build-and-release
    runs-on: ubuntu-latest 
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-x64
          path: dist/ubuntu-x64
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-x64
          path: dist/windows-x64
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-x64
          path: dist/macos-x64
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-arm32
          path: dist/ubuntu-arm32
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-arm64
          path: dist/ubuntu-arm64
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_id }} # Or your desired tag
          release_name: PyInstaller Binaries v${{ github.run_id }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ubuntu-x64/* 
          asset_name: codefusion-ubuntu-x64
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows-x64/* 
          asset_name: codefusion-windows-x64
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos-x64/* 
          asset_name: codefusion-macos-x64
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ubuntu-arm32/* 
          asset_name: codefusion-ubuntu-arm32
          asset_content_type: application/octet-stream
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ubuntu-arm64/* 
          asset_name: codefusion-ubuntu-arm64
          asset_content_type: application/octet-stream